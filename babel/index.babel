class Clock extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      switch: true, //switch between session (true) and break
      min: 1, //current min 
      sec: 0, //current sec
      sessionLength: 1, //length of the session duration in mins
      breakLength: 2, //length of the break duration in mins
      pause: true //pause toggles when user click on the timer
    }
  }
  calculateCurrentCounter = () => {
    const currentTimeInMilliSec = (this.state.min * 1000 * 60) + (this.state.sec*1000);
    const newTimeInMin = (currentTimeInMilliSec - 1000) / (1000*60);
    const minutes = Math.floor(newTimeInMin);
    const seconds = Math.round((newTimeInMin % 1) * 60);
    this.setState({ min: minutes, sec: seconds });  
  };

  switchSession = () => {
     const that = this;
    return new Promise(function(resolve, reject){
    that.state.switch? that.setState({min: that.state.breakLength}): that.setState({min: that.state.sessionLength});
    resolve("success!!");
    }).then(function(){
      that.setState(prevState => ({ switch: !(prevState.switch) }));
    }).then(function(){
      that.countDown();
    }).catch(function(e){
      console.error("switchSession error", e);
    }); 
  };

  tick = () => {
    const that = this;
    return new Promise(function(resolve, reject){
    that.calculateCurrentCounter();
    resolve("done!!");
    }).then(function(res){
      console.log(res);
    if(that.state.min === 0 && that.state.sec === 0){
      clearInterval(that.IntervalId);
      that.switchSession();
     }
    }).catch(function(error) { 
    console.error('tick error', error);
    });
};

  countDown = () => { 
    this.IntervalId = setInterval( () => this.tick(), 1000); 
  };

  toggleTimer = () => {
    this.setState(prevState => ({ pause: !prevState.pause }),
    function(){
        this.state.pause? clearInterval(this.IntervalId) : this.countDown();
    }); 
  };

  increaseBreak = () => {
    if(this.state.pause){
       this.setState(prevState => ({ breakLength: prevState.breakLength + 1 }), 
       function(){
           !this.state.switch && this.setState({min: this.state.breakLength});
       });
    }
  };
   
  decreaseBreak = () => {
    if(this.state.pause){
      this.state.breakLength > 1 && this.setState(prevState => ({ breakLength: (prevState.breakLength) - 1 }),
      function(){
          !this.state.switch && this.setState({min: this.state.breakLength, sec:0});
      });
    }
  };
  
  increaseSession = () => {
    if(this.state.pause){
      this.setState(prevState => ({ sessionLength: prevState.sessionLength + 1 }),
      function(){
          this.state.switch && this.setState({min: this.state.sessionLength, sec:0});
      });
    }
  };
  
  decreaseSession = () => {
    if(this.state.pause){
      this.state.sessionLength > 1 && this.setState(prevState => ({ sessionLength: prevState.sessionLength - 1 }), 
      function(){
          this.state.switch && this.setState({min: this.state.sessionLength});
      });
    }
  };
  
  render(){
    return(
       <div>
          <div className="row">
            <div className="col-md-2" />
            <div className="col-md-4">
              <Break incBreak={this.increaseBreak} decBreak={this.decreaseBreak} breakLength={this.state.breakLength}/>
            </div>
            <div className="col-md-4">
              <Session incSession={this.increaseSession} decSession={this.decreaseSession} sessionLength={this.state.sessionLength}/>
            </div>
          </div>
        <div>
            <Timer changeTimer = {this.toggleTimer} minutes = {this.state.min} seconds={this.state.sec} switch= {this.state.switch} 
pause = {this.state.pause}  />
        </div>
     </div>

    )
  }
}

class Timer extends React.Component{
  constructor(props){
    super(props);
  }
  render(){
    let timerClass = 'timerView';
    timerClass += !this.props.pause? (this.props.switch? ' sessionColor':' breakColor') :'';
    return(
    <div><div className= {timerClass} onClick={this.props.changeTimer} >{(this.props.minutes < 10? "0" + this.props.minutes: this.props.minutes) + ":" + (this.props.seconds < 10? "0" + this.props.seconds : this.props.seconds)}</div></div>
    )
  }
}
class Break extends React.Component{
  constructor(props){
    super(props);
  }
  
  render(){
    return(
    <div>
        <div>Break Length</div>
        <div className="row">
          <div className="col-md-3" />
          <div className="col-md-2 clickable" onClick={this.props.incBreak}>+</div>
        <div className="col-md-2">{this.props.breakLength}</div>
        <div className="col-md-2 clickable" onClick={this.props.decBreak}>-</div>
        </div>
      </div>
    )
  }
}

class Session extends React.Component{
  constructor(props){
    super(props);
  }
  
  render(){
    return(
    <div>
        <div> Session Length </div>
        <div className="row text-center">
          <div className="col-md-3" />
          <div className="col-md-2 clickable" onClick={this.props.incSession}>+</div>
          <div className="col-md-2">{this.props.sessionLength}</div>
          <div className="col-md-2 clickable" onClick={this.props.decSession}>-</div>
        </div>
      </div>
    )
  }
}


ReactDOM.render(
  <Clock />,
  document.getElementById('container')
);