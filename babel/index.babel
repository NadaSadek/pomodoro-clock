class Clock extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      switch: true,
      timerString: "1:00",
      min: 1,
      sec: 0,
      sessionLength: 1,
      breakLength: 2,
      pause: true
    }
  }
  
  calculateCurrentCounter = () => {
    var currentTimeInMilliSec = (this.state.min * 1000 * 60) + (this.state.sec*1000);
    var newTimeInMin = (currentTimeInMilliSec - 1000) / (1000*60);
    var minutes = Math.floor(newTimeInMin);
    var seconds = Math.round((newTimeInMin % 1) * 60);
    console.log("min " + minutes + " ,secs " + seconds);
    this.setState({ min: minutes, sec: seconds, timerString: minutes + ":" + ((seconds === 0)? "00" : seconds)});  
  };

  switchSession = () => { 
        this.state.switch? this.setState({min: this.state.breakLength}): this.setState({min: this.state.sessionLength});
    this.setState(prevState => ({ switch: !prevState.switch }))
    
  };

  tick = () => {   
    this.calculateCurrentCounter();
    if(this.state.min === 0 && this.state.sec === 0) this.switchSession();
};

  countDown = () => { 
    this.IntervalId = setInterval( () => this.tick(), 1000); 
  };

  toggleTimer = () => {
    console.log(this.state.pause);
    this.setState(prevState => ({ pause: !prevState.pause }))
    console.log(this.state.pause + ", "+ this.state.switch);
    this.state.pause? clearInterval(this.IntervalId) :this.countDown();
  };
  
  increaseBreak = () => {
    !this.state.pause && this.setState(prevState => ({ breakLength: prevState.breakLength + 1 }))
  };
   
   decreaseBreak = () => {
      !this.state.pause && this.state.breakLength > 0 && this.setState(prevState => ({ breakLength: prevState.breakLength - 1 }))
  };
  
  increaseSession = () => {
    !this.state.pause && this.setState(prevState => ({ sessionLength: prevState.sessionLength + 1 }))
  };
  
  decreaseSession = () => {
      !this.state.pause && this.state.sessionLength > 0 && this.setState(prevState => ({ sessionLength: prevState.sessionLength - 1 }))
  };
  
  render(){
    return(
       <div>
          <div className="row">
            <div className="col-md-6">
              <Break incBreak={this.increaseBreak} decBreak={this.decreaseBreak} breakLength={this.state.breakLength}/>
            </div>
            <div className="col-md-6">
              <Session incSession={this.increaseSession} decBreak={this.decreaseSession} sessionLength={this.state.sessionLength}/>
            </div>
          </div>
        <div>
            <Timer changeTimer = {this.toggleTimer} timerStr = {this.state.timerString}/>
        </div>
     </div>

    )
  }
}

class Timer extends React.Component{
  constructor(props){
    super(props);
  }
  render(){
    return(
    <div><div className="TimerView" onClick={this.props.changeTimer} >{this.props.timerStr}</div></div>
    )
  }
}
class Break extends React.Component{
  constructor(props){
    super(props);
  }
  
  render(){
    return(
    <div className="sessionView">
        <div>Break Length</div>
        <div onClick={this.props.incBreak}>+</div>
        <div>{this.props.breakLength}</div>
        <div onClick={this.props.decBreak}>-</div>
      </div>
    )
  }
}

class Session extends React.Component{
  constructor(props){
    super(props);
  }
  
  render(){
    return(
    <div>
        <div>Session Length</div>
        <div onClick={this.props.incSession}>+</div>
        <div>{this.props.sessionLength}</div>
        <div onClick={this.props.decSession}>-</div>
      </div>
    )
  }
}


ReactDOM.render(
  <Clock />,
  document.getElementById('container')
);